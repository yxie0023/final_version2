@model IEnumerable<final_version2.Models.Rest>

@{
    ViewBag.Title = "Location";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Restaurant Location</h2>

<!DOCTYPE html>
<html>
<head>
    <title>Geolocation</title>

    <script src="https://code.jquery.com/jquery-2.2.3.min.js"></script>

    <link rel="stylesheet" href="https://openlayers.org/en/v5.3.0/css/ol.css" type="text/css">
    <script src="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/build/ol.js"></script>

    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">

    <style>
        .map {
            position: relative;
        }

        .ol-popup {
            position: absolute;
            background-color: white;
            -webkit-filter: drop-shadow(0 1px 4px rgba(0,0,0,0.2));
            filter: drop-shadow(0 1px 4px rgba(0,0,0,0.2));
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #cccccc;
            bottom: 12px;
            left: -50px;
            min-width: 280px;
        }

            .ol-popup:after, .ol-popup:before {
                top: 100%;
                border: solid transparent;
                content: " ";
                height: 0;
                width: 0;
                position: absolute;
                pointer-events: none;
            }

            .ol-popup:after {
                border-top-color: white;
                border-width: 10px;
                left: 48px;
                margin-left: -10px;
            }

            .ol-popup:before {
                border-top-color: #cccccc;
                border-width: 11px;
                left: 48px;
                margin-left: -11px;
            }

        .ol-popup-closer {
            text-decoration: none;
            position: absolute;
            top: 2px;
            right: 8px;
        }

            .ol-popup-closer:after {
                content: "✖";
            }
    </style>

</head>
<body>
    <div id="map" class="map"></div>
    <div id="popup" class="ol-popup">
        <a href="#" id="popup-closer" class="ol-popup-closer"></a>
        <div id="popup-content"></div>
    </div>
    <div id="info" style="display: none;"></div>

    <script>
        var view = new ol.View({
            center: [0, 0],
            zoom: 10
        });

        var map = new ol.Map({
            loadTilesWhileAnimating: true,
            loadTilesWhileInteracting: true,
            renderer: 'canvas',
            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM()
                })
            ],
            target: document.getElementById('map'),
            view: view
        });

        var geolocation = new ol.Geolocation({
            // enableHighAccuracy must be set to true to have the heading value.
            trackingOptions: {
                enableHighAccuracy: true
            },
            projection: view.getProjection()
        });

        // handle geolocation error.
        geolocation.on('error', function (error) {
            var info = document.getElementById('info');
            info.innerHTML = error.message;
            info.style.display = '';
        });

        var accuracyFeature = new ol.Feature();

        geolocation.on('change:accuracyGeometry', function () {
            accuracyFeature.setGeometry(geolocation.getAccuracyGeometry());
        });

        var positionFeature = new ol.Feature();
        positionFeature.setStyle(new ol.style.Style({
            image: new ol.style.Circle({
                radius: 6,
                fill: new ol.style.Fill({
                    color: '#3399CC'
                }),
                stroke: new ol.style.Stroke({
                    color: '#fff',
                    width: 2
                })
            })
        }));

        geolocation.on('change:position', function () {
            var coordinates = geolocation.getPosition();
            positionFeature.setGeometry(coordinates ?
                new ol.geom.Point(coordinates) : null);
            centerMap(ol.proj.toLonLat(coordinates));
        });

        new ol.layer.Vector({
            map: map,
            source: new ol.source.Vector({
                features: [accuracyFeature, positionFeature]
            })
        });

        geolocation.setTracking(true);

        //145.038,-37.876
        function centerMap(coordinates) {
            map.getView().setCenter(ol.proj.transform([coordinates[0], coordinates[1]], 'EPSG:4326', 'EPSG:3857'));
            map.getView().setZoom(15);
        }

         
        var locations = [];
        // The below is a simple jQuery selector
$(".coordinates").each(function () {
    var longitude = $(".Longitude", this).text().trim();
    var latitude = $(".Latitude", this).text().trim();
    var description = $(".Description", this).text().trim();
    var name = $(".Name", this).text().trim();
    // Create a point data structure to hold the values.
    var point = {
        "latitude": latitude,
        "longitude": longitude,
        "description": description,
        "name": name
    };
    // Push them all into an array.
    locations.push(point);
});

            var restaurantFeature = [];

            var vectorSource = new ol.source.Vector({ // VectorSource({
        });

        var data = [];
        for (var i = 0; i < locations.length; i++) {
            var feature = new ol.Feature({
                name: locations[i].name,
                geometry: new ol.geom.Point(ol.proj.transform([locations[i].longitude, locations[i].latitude])),
            });

            vectorSource.addFeature(feature);
            data.push(feature)
        }

        var vectorLayer = new ol.layer.Vector({ // VectorLayer({
            source: vectorSource
        });

        var rasterLayer = new ol.layer.Tile({ // TileLayer({
            source: new ol.source.TileJSON({
                url: 'https://api.tiles.mapbox.com/v3/mapbox.geography-class.json?secure',
                crossOrigin: ''
            })
        });

        map.addLayer(vectorLayer)

        var container = document.getElementById('popup');
        var content = document.getElementById('popup-content');
    var closer = document.getElementById('popup-closer');

    var overlay = new ol.Overlay({
            element: container,
        positioning: 'bottom-center',
        stopEvent: false,
        offset: [0, -25]
        });
        map.addOverlay(overlay);

        closer.onclick = function () {
        overlay.setPosition(undefined);
        closer.blur();
        return false;
    };

    map.on('click', function (evt) {
        var coordinate = evt.coordinate;


        var feature = map.forEachFeatureAtPixel(evt.pixel,
            function (feature) {
            return feature;
        });

        if (feature) {
            var coordinates = map.getCoordinateFromPixel(evt.pixel);
            overlay.setPosition(coordinates);
            for (i; i < locations.length; i++) { 
                content.innerHTML = '<p>' + feature.get(locations[i].name) + '</p><code>longitude:</code>'+locations[i].longitude;
            }
        } else {
            overlay.setPosition(undefined);
            closer.blur();
            return false;
        }
    });

        // change mouse cursor when over marker
        map.on('pointermove', function (e) {
        if (e.dragging) {
            overlay.setPosition(undefined);
            closer.blur();
            return;
        }
        var pixel = map.getEventPixel(e.originalEvent);
        var hit = map.hasFeatureAtPixel(pixel);
        map.getTarget().style.cursor = hit ? 'pointer' : '';
    });

    </script>

</body>
</html>
